C51 COMPILER V9.59.0.0   COMMON                                                            04/01/2020 17:49:24 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE COMMON
OBJECT MODULE PLACED IN .\Objects\common.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Code\Utils\common.c LARGE OPTIMIZE(8,SPEED) BROWSE MODP2 INCDIR(.\Code\B
                    -asic\def;.\Code\Basic\delay;.\Code\Basic\init;.\Code\Basic\uart;.\Code\Gizwits;.\Code\Utils) DEFINE(PROTOCOL_DEBUG) DEBU
                    -G OBJECTEXTEND PRINT(.\Listings\common.lst) OBJECT(.\Objects\common.obj)

line level    source

   1          #include "common.h"
   2          
   3          //计算校验和
   4          uint8_t ICACHE_FLASH_ATTR gizProtocolSum(uint8_t *buf, uint32_t len)
   5          {
   6   1          uint8_t sum = 0;
   7   1          uint32_t i = 0;
   8   1          if (buf == NULL || len <= 0)//异常参数
   9   1              return 0;
  10   1          for (i = 2; i < len - 1; i++)//除去包头和校验字符
  11   1              sum += buf[i];
  12   1          return sum;
  13   1      }
  14          
  15          //转换16位数
  16          uint16_t ICACHE_FLASH_ATTR exchangeBytes(uint16_t value)
  17          {
  18   1          uint16_t tmp_value = 0;
  19   1          uint8_t *index_1, *index_2;
  20   1      
  21   1          index_1 = (uint8_t *)&tmp_value;
  22   1          index_2 = (uint8_t *)&value;
  23   1      
  24   1          *index_1 = *(index_2 + 1);
  25   1          *(index_1 + 1) = *index_2;
  26   1      
  27   1          return tmp_value;
  28   1      }
  29          
  30          /**
  31           * htonl unsigned long  -> Network byte order
  32           * ntohl Network byte order -> unsigned long
  33           */
  34          uint32_t ICACHE_FLASH_ATTR exchangeWord(uint32_t value)
  35          {
  36   1          return ((value & 0x000000FF) << 24) |
  37   1                 ((value & 0x0000FF00) << 8) |
  38   1                 ((value & 0x00FF0000) >> 8) |
  39   1                 ((value & 0xFF000000) >> 24);
  40   1      }
  41          
  42          /**
  43          * @brief Character to binary
  44          * @param[in]   A  : Character A
  45          * @param[out]  B  : Character B
  46          * @return     : Accounting for one byte of binary data
  47          */
  48          uint8_t ICACHE_FLASH_ATTR char2hex(char A, char B)
  49          {
  50   1          uint8_t a, b = 0;
  51   1          if (A >= '0' && A <= '9')
  52   1              a = A - '0';
  53   1          else if (A >= 'A' && A <= 'F')
C51 COMPILER V9.59.0.0   COMMON                                                            04/01/2020 17:49:24 PAGE 2   

  54   1              a = A - 'A' + 10;
  55   1          else if (A >= 'a' && A <= 'f')
  56   1              a = A - 'a' + 10;
  57   1          if (B >= '0' && B <= '9')
  58   1              b = B - '0';
  59   1          else if (B >= 'A' && B <= 'F')
  60   1              b = B - 'A' + 10;
  61   1          else if (B >= 'a' && B <= 'f')
  62   1              b = B - 'a' + 10;
  63   1          return (a << 4) + b;
  64   1      }
  65          
  66          /**
  67          * @brief checkStringIsNotZero
  68          
  69          * Check String Is Zero ,Or Not
  70          
  71          * @param[in]    : String
  72          * @param[out]   :
  73          * @return       : 0,String Not All Zero
  74          *                -1,Input Illegal
  75          *                 1,String All Zero
  76          */
  77          int8_t ICACHE_FLASH_ATTR checkStringIsNotZero(const char *datas)
  78          {
  79   1          uint32_t i = 0;
  80   1          uint32_t dataLen = 0;
  81   1      
  82   1          dataLen = gizStrlen(datas);
  83   1      
  84   1          if (NULL == datas)
  85   1              return -1;
  86   1      
  87   1          for (i = 0; i < dataLen; i++)
  88   1          {
  89   2              if (datas[i] != '0')
  90   2              {
  91   3                  return 0;
  92   3              }
  93   2          }
  94   1      
  95   1          return 1;
  96   1      }
  97          
  98          /**
  99          * @brief Calculate week date
 100          
 101          * Calculate the day of the week based on the date
 102          
 103          * @param [in] iYear   
 104          * @param [in] iMonth   
 105          * @param [in] iDay  
 106          *
 107          * @return sum : Checksum
 108          */
 109          int32_t ICACHE_FLASH_ATTR returnWeekDay(uint32_t iYear, uint32_t iMonth, uint32_t iDay)
 110          {
 111   1          int32_t iWeek = 0;
 112   1          uint32_t y = 0, c = 0, m = 0, d = 0;
 113   1      
 114   1          if (iMonth == 1 || iMonth == 2)
 115   1          {
C51 COMPILER V9.59.0.0   COMMON                                                            04/01/2020 17:49:24 PAGE 3   

 116   2              c = (iYear - 1) / 100;
 117   2              y = (iYear - 1) % 100;
 118   2              m = iMonth + 12;
 119   2              d = iDay;
 120   2          }
 121   1          else
 122   1          {
 123   2              c = iYear / 100;
 124   2              y = iYear % 100;
 125   2              m = iMonth;
 126   2              d = iDay;
 127   2          }
 128   1      
 129   1          iWeek = y + y / 4 + c / 4 - 2 * c + 26 * (m + 1) / 10 + d - 1;
 130   1          iWeek = iWeek >= 0 ? (iWeek % 7) : (iWeek % 7 + 7);
 131   1      
 132   1          return iWeek;
 133   1      }
 134          
 135          static int32_t ICACHE_FLASH_ATTR isleap(int32_t year)
 136          {
 137   1          return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);
 138   1      }
 139          
 140          static int ICACHE_FLASH_ATTR get_yeardays(int year)
 141          {
 142   1          if (isleap(year))
 143   1              return 366;
 144   1          return 365;
 145   1      }
 146          
 147          /**
 148          * @brief Calculate time zone time
 149          
 150          * Will be the time of the current time zone of Greenwich time
 151          
 152          * @param [in] Ntp: time of Greenwich
 153          *
 154          * @return sum : Back to the wall time structure
 155          */
 156          gizTime_t ICACHE_FLASH_ATTR returnNtp2Wt(uint32_t ntp)
 157          {
 158   1          gizTime_t tm;
 159   1          int32_t x;
 160   1          int32_t i = 1970, mons[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 161   1          uint32_t utc = ntp;
 162   1      
 163   1          /* utc + timezone */
 164   1          utc += TIMEZONE_DEFAULT * ONE_HOUR;
 165   1      
 166   1          for (i = 1970; utc > 0;)
 167   1          {
 168   2              x = get_yeardays(i);
 169   2              if (utc >= x * DAY_SEC)
 170   2              {
 171   3                  utc -= x * DAY_SEC;
 172   3                  i++;
 173   3              }
 174   2              else
 175   2              {
 176   3                  break;
 177   3              }
C51 COMPILER V9.59.0.0   COMMON                                                            04/01/2020 17:49:24 PAGE 4   

 178   2          }
 179   1          tm.year = i;
 180   1      
 181   1          for (i = 0; utc > 0;)
 182   1          {
 183   2              if (isleap(tm.year))
 184   2                  mons[1] = 29;
 185   2              if (utc >= mons[i] * DAY_SEC)
 186   2              {
 187   3                  utc -= mons[i] * DAY_SEC;
 188   3                  i++;
 189   3              }
 190   2              else
 191   2              {
 192   3                  break;
 193   3              }
 194   2          }
 195   1          mons[1] = 28;
 196   1          tm.month = i + 1;
 197   1      
 198   1          for (i = 1; utc > 0;)
 199   1          {
 200   2              if (utc >= DAY_SEC)
 201   2              {
 202   3                  utc -= DAY_SEC;
 203   3                  i++;
 204   3              }
 205   2              else
 206   2              {
 207   3                  break;
 208   3              }
 209   2          }
 210   1          tm.day = i;
 211   1      
 212   1          tm.hour = utc / (60 * 60);
 213   1          tm.minute = utc % (60 * 60) / 60;
 214   1          tm.second = utc % 60;
 215   1          tm.ntp = ntp;
 216   1      
 217   1          return tm;
 218   1      }
 219          
 220          /**
 221          * @brief String conversion binary
 222          * @param[in]   pbSrc    : String 
 223          * @param[in]   nLen    : String length 
 224          * @param[out]  pbDest   : binary 
 225          */
 226          void ICACHE_FLASH_ATTR str2Hex(char *pbDest, char *pbSrc, int32_t nLen)
 227          {
 228   1          char h1, h2;
 229   1          char s1, s2;
 230   1          int32_t i;
 231   1      
 232   1          for (i = 0; i < nLen; i++)
 233   1          {
 234   2              h1 = pbSrc[2 * i];
 235   2              h2 = pbSrc[2 * i + 1];
 236   2      
 237   2              s1 = toupper(h1) - 0x30;
 238   2              if (s1 > 9)
 239   2                  s1 -= 7;
C51 COMPILER V9.59.0.0   COMMON                                                            04/01/2020 17:49:24 PAGE 5   

 240   2      
 241   2              s2 = toupper(h2) - 0x30;
 242   2              if (s2 > 9)
 243   2                  s2 -= 7;
 244   2      
 245   2              pbDest[i] = s1 * 16 + s2;
 246   2          }
 247   1      }
 248          
 249          /**
 250          * @brief Binary conversion string
 251          * @param[in]   pbSrc    : Binary data 
 252          * @param[in]   nLen    : Binary length 
 253          * @param[out]  pbDest   : Character 
 254          */
 255          void ICACHE_FLASH_ATTR hex2Str(unsigned char *pbDest, unsigned char *pbSrc, int32_t nLen)
 256          {
 257   1          char ddl, ddh;
 258   1          int32_t i;
 259   1      
 260   1          for (i = 0; i < nLen; i++)
 261   1          {
 262   2              ddh = 0x30 + pbSrc[i] / 16;
 263   2              ddl = 0x30 + pbSrc[i] % 16;
 264   2              if (ddh > 0x39)
 265   2                  ddh = ddh + 7;
 266   2              if (ddl > 0x39)
 267   2                  ddl = ddl + 7;
 268   2              pbDest[i * 2] = ddh;
 269   2              pbDest[i * 2 + 1] = ddl;
 270   2          }
 271   1      
 272   1          pbDest[nLen * 2] = '\0';
 273   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3163    ----
   CONSTANT SIZE    =     48    ----
   XDATA SIZE       =   ----     182
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
