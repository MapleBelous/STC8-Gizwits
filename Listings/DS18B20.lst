C51 COMPILER V9.59.0.0   DS18B20                                                           04/10/2020 16:40:33 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE DS18B20
OBJECT MODULE PLACED IN .\Objects\DS18B20.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Code\Sensor\DS18B20\DS18B20.c OMF2 OPTIMIZE(9,SPEED) BROWSE MODP2 INCDIR
                    -(.\Code\Basic\def;.\Code\Basic\delay;.\Code\Basic\init;.\Code\Basic\uart;.\Code\Gizwits;.\Code\Sensor\DS18B20;.\Code\Sen
                    -sor\LCD1602) DEBUG PRINT(.\Listings\DS18B20.lst) OBJECT(.\Objects\DS18B20.obj)

line level    source

   1          #include "DS18B20.h"
   2          //------------------------------------------------------------------------------------------------//
   3          xdata DS18B20ActST DS18B20ST;
   4          code ushort DS18B20ConvertTMaxTime[4] = {95, 190, 378, 753}; //温度转换最大等待时间(ms)
   5          //------------------------------------------------------------------------------------------------//
   6          static bool DS18B20Init(void);            //初始化程序
   7          static void DS18B20WriteByte(uchar Byte); //写入一个字节数据
   8          static uchar DS18B20ReadByte(void);       //读取一个字节数据
   9          //------------------------------------------------------------------------------------------------//
  10          void DS18B20STInit(void) //初始化DS18B20内存&读取当前DS18B20分辨率
  11          {
  12   1          uchar Temp, TH, TL;
  13   1          memset(&DS18B20ST, 0, sizeof(DS18B20ActST)); //初始化后的缓存温度值应为DS18B20MinT
  14   1          if (DS18B20Init() == EXIT_FAILURE)           //DS18B20初始化失败
  15   1          {
  16   2      #if LOGRANK_UART1 >= 1
  17   2              printf("ERR:DS18B20Init fail when DS18B20STInit!\r\n");
  18   2      #endif
  19   2              return; //放弃读取DS18B20分辨率.并日志记录ERR信息
  20   2          }
  21   1          DS18B20WriteByte(DS18B20SkipROM);                   //写入跳过ROM操作
  22   1          DS18B20WriteByte(DS18B20ReadRAM);                   //写入读取RAM指令
  23   1          Temp = DS18B20ReadByte(), Temp = DS18B20ReadByte(); //跳过温度,此时不能趁机读取温度,是无效值
  24   1          TH = DS18B20ReadByte(), TL = DS18B20ReadByte();     //跳过TH/TL
  25   1          Temp = DS18B20ReadByte();                           //读取配置寄存器
  26   1          DS18B20ST.ResolutionMode = (Temp >> 5) & 0x03;      //存入DS18B20任务指示器中
  27   1          DS18B20ST.TemperatureHighData1 = TemperatureH;      //确定当前Mode下高温报警阈值
  28   1          DS18B20ST.TemperatureHighData2 = DS18B20ST.TemperatureHighData1 - TemperatureT;
  29   1          DS18B20ST.TemperatureLowData1 = TemperatureL; //确定当前Mode下低温报警阈值
  30   1          DS18B20ST.TemperatureLowData2 = DS18B20ST.TemperatureLowData1 + TemperatureT;
  31   1          DS18B20ConvertTemperature();      //初始化-开始转换温度#忽略返回值
  32   1          switch (DS18B20ST.ResolutionMode) //对应Mode延时
  33   1          {
  34   2          case 0:
  35   2              delay_ms(100);
  36   2              break;
  37   2          case 1:
  38   2              delay_ms(200);
  39   2              break;
  40   2          case 2:
  41   2              delay_ms(385);
  42   2              break;
  43   2          case 3:
  44   2              delay_ms(765);
  45   2              break;
  46   2          }
  47   1          DS18B20GetTemperature(); //初始化-读取温度值#忽略返回值
  48   1      #if LOGRANK_UART1 >= 2
  49   1          printf("LOG#:DS18B20Init ok\r\n");
  50   1      #endif
  51   1      #if LOGRANK_UART1 >= 3
  52   1          printf("LOG:TH-%bu,TL-%bu,Mode-%bu,H1-%u,H2-%u,L1-%u,L2-%u\r\n",
  53   1                 TH, TL, DS18B20ST.ResolutionMode,
C51 COMPILER V9.59.0.0   DS18B20                                                           04/10/2020 16:40:33 PAGE 2   

  54   1                 DS18B20ST.TemperatureHighData1, DS18B20ST.TemperatureHighData2,
  55   1                 DS18B20ST.TemperatureLowData1, DS18B20ST.TemperatureLowData2);
  56   1      #endif
  57   1      }
  58          bool DS18B20Set(char TH, char TL, uchar Mode) //设置并保存TH/TL/Mode
  59          {
  60   1          if (DS18B20Init() == EXIT_FAILURE) //DS18B20初始化失败,返回错误码EXIT_FAILURE
  61   1              return EXIT_FAILURE;
  62   1          DS18B20WriteByte(DS18B20SkipROM);  //写入跳过ROM操作
  63   1          DS18B20WriteByte(DS18B20WriteRAM); //写入写入RAM指令
  64   1          DS18B20WriteByte(TH);
  65   1          DS18B20WriteByte(TL);
  66   1          DS18B20WriteByte(Mode << 5);
  67   1          if (DS18B20Init() == EXIT_FAILURE) //DS18B20初始化失败,返回错误码EXIT_FAILURE
  68   1              return EXIT_FAILURE;
  69   1          DS18B20WriteByte(DS18B20SkipROM); //写入跳过ROM操作
  70   1          DS18B20WriteByte(DS18B20CopyRAM); //写入保存RAM到E2CROM
  71   1          return EXIT_SUCCESS;
  72   1      }
  73          bool DS18B20ConvertTemperature(void) //开始转换温度值
  74          {
  75   1          if (DS18B20Init() == EXIT_FAILURE) //DS18B20初始化失败,返回错误码EXIT_FAILURE
  76   1              return EXIT_FAILURE;
  77   1          DS18B20WriteByte(DS18B20SkipROM);  //写入跳过ROM操作
  78   1          DS18B20WriteByte(DS18B20ConvertT); //写入开始转换温度指令
  79   1          return EXIT_SUCCESS;
  80   1      }
  81          bool DS18B20GetTemperature(void) //读取温度值
  82          {
  83   1          pdata uchar H, L;
  84   1          pdata ushort T, Base = DS18B20MinT;
  85   1          Base = -Base, Base <<= (1 + DS18B20ST.ResolutionMode); //Gizwit传输基准值
  86   1          if (DS18B20Init() == EXIT_FAILURE)                     //DS18B20初始化失败,返回错误码DS18B20InitFail
  87   1              return EXIT_FAILURE;
  88   1          DS18B20WriteByte(DS18B20SkipROM);             //写入跳过ROM操作
  89   1          DS18B20WriteByte(DS18B20ReadRAM);             //写入读取RAM指令
  90   1          L = DS18B20ReadByte(), H = DS18B20ReadByte(); //读取温度寄存器
  91   1          T = H, T <<= 8, T |= L;                       //合并读取到的温度
  92   1          T >>= (3 - (DS18B20ST.ResolutionMode));       //修正为当前分辨率
  93   1          if ((T & 0x1000) && (T & 0x0800))             //温度值为负数,以两个符号位确定
  94   1          {
  95   2              T = ~T, ++T;  //取原码
  96   2              T = Base - T; //以基准值计算最终无符号类型温度值
  97   2          }
  98   1          else
  99   1              T += Base; //以基准值计算最终无符号类型温度值
 100   1          if (T != DS18B20ST.TemperatureData)
 101   1              {
 102   2                      DS18B20ST.TemperatureData = T;   //更新温度数据
 103   2                      GizwitsST.NeedReport = true; //与历史温度值不同,立即挂起设备上报任务
 104   2                      if (DS18B20ST.TemperatureHigh == false && T >= (DS18B20ST.TemperatureHighData1))
 105   2                              DS18B20ST.TemperatureHigh = true; //高温报警
 106   2                      if (DS18B20ST.TemperatureHigh == true && T <= (DS18B20ST.TemperatureHighData2))
 107   2                              DS18B20ST.TemperatureHigh = false; //高温报警取消
 108   2                      if (DS18B20ST.TemperatureLow == false && T <= (DS18B20ST.TemperatureLowData1))
 109   2                              DS18B20ST.TemperatureLow = true; //高温报警
 110   2                      if (DS18B20ST.TemperatureLow == true && T >= (DS18B20ST.TemperatureLowData2))
 111   2                              DS18B20ST.TemperatureLow = false; //高温报警取消
 112   2              }
 113   1          return EXIT_SUCCESS;
 114   1      }
 115          //------------------------------------------------------------------------------------------------//
C51 COMPILER V9.59.0.0   DS18B20                                                           04/10/2020 16:40:33 PAGE 3   

 116          static bool DS18B20Init(void) //初始化程序
 117          {
 118   1          pdata uchar i = 20;
 119   1          DS18B20_DATA = 1, delay_us(60), DS18B20_DATA = 0;
 120   1          delay_us(485), DS18B20_DATA = 1; //延时等待后上拉总线
 121   1          do
 122   1          {
 123   2              delay_us(10);
 124   2          } while (DS18B20_DATA == 1 && (--i)); //等待DS18B20应答
 125   1          if (i == 0)
 126   1          {
 127   2      #if LOGRANK_UART1 >= 1
 128   2              printf("ERR:DS18B20Init fail\r\n"); //日志记录DS18B20初始化未收到应答
 129   2      #endif
 130   2              return EXIT_FAILURE;
 131   2          }
 132   1          DS18B20_DATA = 1; //发送已经就位
 133   1          delay_us(130);    //等待DS18B20就位,实测150以上绝对稳定
 134   1          return EXIT_SUCCESS;
 135   1      }
 136          static void DS18B20WriteByte(uchar Byte) //写入一个字节数据
 137          {
 138   1          pdata uchar i;
 139   1          for (i = 0; i != 8; ++i, Byte >>= 1)
 140   1          {
 141   2              DS18B20_DATA = 0;
 142   2              delay_us(1);
 143   2              DS18B20_DATA = Byte & 0x01;
 144   2              delay_us(60);
 145   2              DS18B20_DATA = 1;
 146   2              delay_us(1);
 147   2          }
 148   1      }
 149          static uchar DS18B20ReadByte(void) //读取一个字节数据
 150          {
 151   1          pdata uchar i, re;
 152   1          DS18B20_DATA = 1;
 153   1          delay_us(10);
 154   1          for (i = 0, re = 0; i != 8; ++i)
 155   1          {
 156   2              re >>= 1;
 157   2              DS18B20_DATA = 0;
 158   2              delay_us(1);
 159   2              DS18B20_DATA = 1;
 160   2              delay_us(1);
 161   2              if (DS18B20_DATA == 1)
 162   2                  re |= 0x80;
 163   2              delay_us(60);
 164   2          }
 165   1          return re;
 166   1      }
 167          //------------------------------------------------------------------------------------------------//


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    919    ----
   CONSTANT SIZE    =    149    ----
   XDATA SIZE       =     12    ----
   PDATA SIZE       =   ----      10
   DATA SIZE        =   ----       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.59.0.0   DS18B20                                                           04/10/2020 16:40:33 PAGE 4   

   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
